{
  "name": "soup",
  "version": "0.1.3",
  "main": "lib/soup.js",
  "description": "Query and manipulate raw markup via CSS selectors, without losing original formatting",
  "homepage": "http://github.com/callumlocke/soup",
  "bugs": {
    "url": "https://github.com/callumlocke/soup/issues"
  },
  "author": {
    "name": "Callum Locke",
    "url": "http://github.com/callumlocke"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/callumlocke/soup"
  },
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "devDependencies": {
    "coffee-script": "~1.6.3",
    "sugar": "~1.4.1",
    "grunt-contrib-nodeunit": "~0.2.0",
    "grunt-contrib-watch": "~0.5.0",
    "time-grunt": "~0.2.0",
    "grunt-cli": "~0.1.11",
    "grunt-contrib-coffee": "~0.8.2",
    "grunt-contrib-clean": "~0.5.0"
  },
  "dependencies": {
    "htmlparser2": "~3.4.0",
    "cheerio": "~0.13.1"
  },
  "scripts": {
    "test": "grunt nodeunit:all",
    "prepublish": "grunt build",
    "postpublish": "grunt clean:lib"
  },
  "readme": "# soup [![Build Status](https://secure.travis-ci.org/callumlocke/soup.png?branch=master)](http://travis-ci.org/callumlocke/soup) [![Dependency Status](https://gemnasium.com/callumlocke/soup.png)](https://gemnasium.com/callumlocke/soup)\n\nA little library for querying and manipulating tag soup via CSS selectors.\n\nIt manipulates the string itself (rather than operating on a parsed DOM and then re-exporting it). So it retains all the syntactic/formatting nuances of the original, such as:\n\n- attribute quotes or lack thereof,\n- whitespace,\n- invalid-but-parseable stuff,\n- omitted closing tags, etc.\n\nUse cases:\n\n- build tasks/plugins that need to manipulate markup without parsing away all the original formatting;\n- GUI webpage design tools that need to combine hand-coded HTML with WYSIWYG-driven edits;\n- anywhere else you need to make automated, light-touch changes to other people's markup.\n\n\n## Usage\n\n`npm install soup`\n\n```javascript\nvar Soup = require('soup');\n\nsoup = new Soup('<div class=thing><img src=cat.jpg></div>');\n\n// Change the img src\nsoup.setAttribute('img', 'src', 'dog.jpg');\nsoup.toString(); // <div class=thing><img src=dog.jpg></div>\n\n// Add a class to the div\nsoup.setAttribute('.thing', 'class', function (oldValue) {\n  return oldValue + ' another';\n});\nsoup.toString(); // <div class=\"thing another\"><img src=dog.jpg></div>\n```\n\n### Selectors\n\nSoup uses [Cheerio](https://github.com/MatthewMueller/cheerio) under the hood for finding elements to update, so you can use any CSS3 selector in the methods below.\n\n\n### Methods\n\n#### `setAttribute(selector, attributeName, newValue)`\n\n- `newValue` can be:\n  - any string – to set the attribute's value\n  - `true` – to set it as a boolean attribute (eg `required`)\n  - `false` – to delete the attribute\n  - `null` – for \"no change\"\n  - a function – which will be passed the current value, and should return one of the above values\n    - it will also be passed an `index` as the second attribute (if the attribute was found), which contains the character index of the attribute you're changing.\n- Soup will respect the original quote style of each attribute it updates whenever possible (but quotes will be added to non-quoted values if necessitated by characters in the new value).\n\nExample – adding a query string to all image URLs:\n\n```javascript\nsoup.setAttribute('img', 'src', function (oldValue) {\n  return oldValue + '?12345'\n});\n```\n\n#### `getAttribute(selector, attributeName, callback)`\n\n- Same as `.setAttritute()`, except your callback's return value won't have any effect.\n\n\n#### `setInnerHTML(selector, attributeName, newHTML)`\n\n- `newHTML` can be:\n  - a string of HTML\n  - a function that returns a string of HTML\n    - this will be passed the oldHTML\n  - `null` for \"no change\"\n\nExample – appending new content inside an element:\n\n```javascript\nsoup.setInnerHTML('#foo', function (oldHTML) {\n  return oldHTML + '<p>appended content</p>'\n});\n```\n\n\n## License\n\nCopyright (c) 2014 Callum Locke. Licensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "soup@0.1.3",
  "_from": "soup@~0.1.3"
}
